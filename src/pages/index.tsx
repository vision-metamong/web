import styled from '@emotion/styled';
import Head from 'next/head';
import { useState } from 'react';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: 'sk-proj-onE83Q3jYILWBFpiMNcWT3BlbkFJaETrtNLqFN67H9eP0oWE',
  dangerouslyAllowBrowser: true,
});

export default function Home() {
  const [selectedFile, setSelectedFile] = useState<any>(null);

  const handleFileChange = async (event: any) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);

      const uploadedFile = await openai.files.create({
        file: file,
        purpose: 'assistants',
      });

      const thread = await openai.beta.threads.create({
        messages: [
          {
            role: 'assistant',
            content:
              '면접에 응해주셔서 감사합니다. 지금부터 면접을 시작하겠습니다. 한번에 하나의 질문을 드릴거고, 그에 맞는 대답을 부탁드립니다. 준비되셨으면 자기소개를 부탁해요.',
            attachments: [
              {
                file_id: uploadedFile.id,
                tools: [{ type: 'file_search' }],
              },
            ],
          },
        ],
      });

      await fetch('/api/prepare', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          uploadedFileId: uploadedFile.id,
          threadId: thread.id,
        }),
      })
        .then((response) => {
          if (response.ok) {
            console.log('Successfully prepared interview');
          } else {
            console.error('Failed to prepare interview');
          }
        })
        .catch((error) => {
          console.error('Failed to prepare interview', error);
        });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledMain>
        <input type="file" accept=".pdf" onChange={handleFileChange} />
        {selectedFile && <p>Selected File: {selectedFile.name}</p>}
      </StyledMain>
    </>
  );
}

const StyledMain = styled.main`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;
